////Module////
module DRMAA2 {
////End////

//////// Enumerations ////////

////JobState////
	enum JobState {
		UNDETERMINED, QUEUED, QUEUED_HELD, RUNNING, SUSPENDED, REQUEUED,
		REQUEUED_HELD, DONE, FAILED};
////End////

////OperatingSystem////
	enum OperatingSystem {
		AIX, BSD, LINUX, HPUX, IRIX, MACOS, SUNOS, TRU64, UNIXWARE, WIN,
		WINNT, OTHER_OS};
////End////

////CpuArchitecture////
	enum CpuArchitecture {
		ALPHA, ARM, ARM64, CELL, PARISC, PARISC64, X86, X64, IA64, MIPS,
		MIPS64, PPC, PPC64, PPC64LE, SPARC, SPARC64, OTHER_CPU};
////End////

////DrmaaEvent////
	enum DrmaaEvent {
		NEW_STATE, MIGRATED, ATTRIBUTE_CHANGE
	};
////End////

////DrmaaCapability////
	enum DrmaaCapability {
		ADVANCE_RESERVATION, RESERVE_SLOTS, CALLBACK, BULK_JOBS_MAXPARALLEL,
		 JT_EMAIL, JT_STAGING, JT_DEADLINE, JT_MAXSLOTS, JT_ACCOUNTINGID,
		RT_STARTNOW, RT_DURATION, RT_MACHINEOS, RT_MACHINEARCH
	};
////End////

////ForwardDeclarations////
interface Job;
interface JobArray;
struct QueueInfo;
struct MachineInfo;
struct SlotInfo;
interface Reservation;
interface JobSession;
////End////

//////// Type Definitions ////////

////DataTypes////
	typedef sequence<string> OrderedStringList;
	typedef sequence<string> StringList;
	typedef sequence<Job> JobList;
	typedef sequence<QueueInfo> QueueInfoList;
	typedef sequence<MachineInfo> MachineInfoList;
	typedef sequence<SlotInfo> OrderedSlotInfoList;
	typedef sequence<Reservation> ReservationList;
	typedef sequence< sequence<string,2> > Dictionary;
	typedef string AbsoluteTime;
	typedef long long TimeAmount;
	native ZERO_TIME;
	native INFINITE_TIME;
	native NOW;
	native HOME_DIRECTORY;
	native WORKING_DIRECTORY;
	native PARAMETRIC_INDEX;
////End////

////ResourceLimits////
	string CORE_FILE_SIZE;
	string CPU_TIME;
	string DATA_SIZE;
	string FILE_SIZE;
	string OPEN_FILES;
	string STACK_SIZE;
	string VIRTUAL_MEMORY;
	string WALLCLOCK_TIME;
////End////

//////// Value Types ////////

////JobInfo////
	struct JobInfo {
		string jobId;
		string jobName;
		long exitStatus;
		string terminatingSignal;
		string annotation;
		JobState jobState;
		any jobSubState;
		OrderedSlotInfoList allocatedMachines;
		string submissionMachine;
		string jobOwner;
		long slots;
		string queueName;
		TimeAmount wallclockTime;
		long cpuTime;
		AbsoluteTime submissionTime;
		AbsoluteTime dispatchTime;
		AbsoluteTime finishTime;
	};
////End////

////SlotInfo////
	struct SlotInfo {
		string machineName;
		long slots;
	};
////End////

////ReservationInfo////
	struct ReservationInfo {
		string reservationId;
		string reservationName;
		AbsoluteTime reservedStartTime;
		AbsoluteTime reservedEndTime;
		StringList usersACL;
		long reservedSlots;
		OrderedSlotInfoList reservedMachines;
	};
////End////

////JobTemplate////
	struct JobTemplate {
		string remoteCommand;					
		OrderedStringList args;					
		boolean submitAsHold;					
		boolean rerunnable;						
		Dictionary jobEnvironment;				
		string workingDirectory;				
		string jobCategory;						
		StringList email;						
		boolean emailOnStarted;					
		boolean emailOnTerminated;				
		string jobName;							
		string inputPath;						
		string outputPath;						
		string errorPath;						
		boolean joinFiles;						
		string reservationId;					
		string queueName;						
 		long minSlots;							
		long maxSlots;							
		long priority;							
		OrderedStringList candidateMachines;	
		long minPhysMemory;						
		OperatingSystem machineOS;				
		CpuArchitecture machineArch;			
		AbsoluteTime startTime;					
		AbsoluteTime deadlineTime;				
		Dictionary stageInFiles;				
		Dictionary stageOutFiles;				
		Dictionary resourceLimits;			
		string accountingId;					
	};
////End////

////ReservationTemplate////
	struct ReservationTemplate {
		string reservationName;					
		AbsoluteTime startTime;					
		AbsoluteTime endTime;					
		TimeAmount duration;					
 		long minSlots;							
		long maxSlots;							
		string jobCategory;						
		StringList usersACL;						
		OrderedStringList candidateMachines;	
		long minPhysMemory;						
		OperatingSystem machineOS;				
		CpuArchitecture machineArch;			
	};
////End////

////DrmaaNotification////
	struct DrmaaNotification {
		DrmaaEvent event;
		string jobId;
		string sessionName;
		JobState jobState;
	};
////End////

////QueueInfo////
	struct QueueInfo {
		string name;
	};
////End////

////Version////
	struct Version {
		string major; 
		string minor;
	};
////End////

////MachineInfo////
	struct MachineInfo {
		string name;	
		boolean available;		
		long sockets;			
		long coresPerSocket;
		long threadsPerCore;	
		double load;	
		long physMemory;
		long virtMemory;		
		OperatingSystem machineOS;	
		Version machineOSVersion;
		CpuArchitecture machineArch;
	};		
////End////


//////// Exceptions ////////

////Exception////
	exception DeniedByDrmsException {string message;};
	exception DrmCommunicationException {string message;};
	exception TryLaterException {string message;};
	exception TimeoutException {string message;};
	exception InternalException {string message;};
	exception InvalidArgumentException {string message;};
	exception InvalidSessionException {string message;};
	exception InvalidStateException {string message;};
	exception OutOfResourceException {string message;};
	exception UnsupportedAttributeException {string message;};
	exception UnsupportedOperationException {string message;};
	exception ImplementationSpecificException {string message; long code;};
////End////

//////// Interfaces ////////

////DrmaaReflective////
	interface DrmaaReflective {
		readonly attribute StringList jobTemplateImplSpec;
		readonly attribute StringList jobInfoImplSpec;
		readonly attribute StringList reservationTemplateImplSpec;
		readonly attribute StringList reservationInfoImplSpec;
		readonly attribute StringList queueInfoImplSpec;
		readonly attribute StringList machineInfoImplSpec;
		readonly attribute StringList notificationImplSpec;

		string getInstanceValue(in any instance, in string name);
		void setInstanceValue(in any instance, in string name, in string value);
		string describeAttribute(in any instance, in string name);
	};
////End////

////DrmaaCallback////
	interface DrmaaCallback {
		void notify(in DrmaaNotification notification);
	};
////End////

////ReservationSession////
	interface ReservationSession {
		readonly attribute string contact;
		readonly attribute string sessionName;
		Reservation getReservation(in string reservationId);
		Reservation requestReservation(in ReservationTemplate reservationTemplate);
		ReservationList getReservations();
	};
////End////

////Reservation////
	interface Reservation {
		readonly attribute string reservationId;
		readonly attribute string sessionName;
		readonly attribute ReservationTemplate reservationTemplate;
		ReservationInfo getInfo();
		void terminate();
	};
////End////

////JobArray////
	interface JobArray {
		readonly attribute string jobArrayId;
		readonly attribute JobList jobs;
		readonly attribute string sessionName;
		readonly attribute JobTemplate jobTemplate;
		void suspend();
		void resume();
		void hold();
		void release();
		void terminate();
		void reap();
	};
////End////

////JobSession////
	interface JobSession {
		readonly attribute string contact;
		readonly attribute string sessionName;
		readonly attribute StringList jobCategories;
		JobList getJobs(in JobInfo filter);
		JobArray getJobArray(in string jobArrayId);
		Job runJob(in JobTemplate jobTemplate);
		JobArray runBulkJobs(
				in JobTemplate jobTemplate,
				in long beginIndex,
				in long endIndex,
				in long step,
				in long maxParallel);
		Job waitAnyStarted(in JobList jobs, in TimeAmount timeout);
		Job waitAnyTerminated(in JobList jobs, in TimeAmount timeout);
	};
////End////

////Job////
	interface Job {
		readonly attribute string jobId;
		readonly attribute string sessionName;
		readonly attribute JobTemplate jobTemplate;
		void suspend();
		void resume();
		void hold();
		void release();
		void terminate();
		void reap();
		JobState getState(out any jobSubState);
		JobInfo getInfo();
		void waitStarted(in TimeAmount timeout);
		void waitTerminated(in TimeAmount timeout);
	};
////End////

////MonitoringSession////
	interface MonitoringSession {
		ReservationList getAllReservations();
		JobList getAllJobs(in JobInfo filter);
		QueueInfoList getAllQueues(in StringList names);
		MachineInfoList getAllMachines(in StringList names);
	};
////End////

////SessionManager////
	interface SessionManager{
		readonly attribute string drmsName;
		readonly attribute Version drmsVersion;
		readonly attribute string drmaaName;
		readonly attribute Version drmaaVersion;
		boolean supports(in DrmaaCapability capability);
		JobSession createJobSession(in string sessionName, 
		                            in string contact);
		ReservationSession createReservationSession(in string sessionName,  
		                                            in string contact);
		JobSession openJobSession(in string sessionName);
		ReservationSession openReservationSession(in string sessionName);
		MonitoringSession openMonitoringSession (in string contact);
		void closeJobSession(in JobSession s);
		void closeReservationSession(in ReservationSession s);
		void closeMonitoringSession(in MonitoringSession s);
		void destroyJobSession(in string sessionName);
		void destroyReservationSession(in string sessionName);
		StringList getJobSessionNames();
		StringList getReservationSessionNames();
		void registerEventNotification(in DrmaaCallback callback);
	};
////End////

////ModuleEnd////
};
////End////
