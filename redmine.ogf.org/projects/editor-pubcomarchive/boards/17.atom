<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Public Comments Archive: #119 - DFDL v1.0 Experience 2</title>
  <link rel="self" href="https://redmine.ogf.org/projects/editor-pubcomarchive/boards/17.atom"/>
  <link rel="alternate" href="https://redmine.ogf.org/projects/editor-pubcomarchive/boards/17"/>
  <id>https://redmine.ogf.org/</id>
  <updated>2020-12-20T04:45:10-05:00</updated>
  <author>
    <name>Open Grid Forum</name>
  </author>
  <generator uri="http://www.redmine.org/">
Redmine  </generator>
  <entry>
    <title>#119 - DFDL v1.0 Experience 2: RE: Please support (real) unordered lists</title>
    <link rel="alternate" href="https://redmine.ogf.org/boards/17/topics/128?r=550#message-550"/>
    <id>https://redmine.ogf.org/boards/17/topics/128?r=550#message-550</id>
    <updated>2020-12-20T04:45:10-05:00</updated>
    <author>
      <name>Colleen Creel</name>
    </author>
    <content type="html">
&lt;p&gt;A red mean and meet are provided for the goals for all issues. The change of the mind and &lt;a href="https://www.myassignmentwriting.com.au/" class="external"&gt;write my assignment&lt;/a&gt; for the sages. Prospects refit for the inductive report for the terms. The signal is filed for the help of the vital baths for offers.&lt;/p&gt;    </content>
  </entry>
  <entry>
    <title>#119 - DFDL v1.0 Experience 2: Resolved - RE: Please support (real) unordered lists</title>
    <link rel="alternate" href="https://redmine.ogf.org/boards/17/topics/128?r=242#message-242"/>
    <id>https://redmine.ogf.org/boards/17/topics/128?r=242#message-242</id>
    <updated>2014-01-14T11:34:40-05:00</updated>
    <author>
      <name>Michael Beckerle</name>
    </author>
    <content type="html">
&lt;p&gt;On DFDL WG Call 2014-01-14, we concluded this is too large a change to consider for DFDL v1.0.&lt;/p&gt;    </content>
  </entry>
  <entry>
    <title>#119 - DFDL v1.0 Experience 2: Action 245 - RE: Please support (real) unordered lists</title>
    <link rel="alternate" href="https://redmine.ogf.org/boards/17/topics/128?r=231#message-231"/>
    <id>https://redmine.ogf.org/boards/17/topics/128?r=231#message-231</id>
    <updated>2013-12-02T11:02:28-05:00</updated>
    <author>
      <name>Michael Beckerle</name>
    </author>
    <content type="html">
&lt;p&gt;To be further investigated as action 245.&lt;/p&gt;    </content>
  </entry>
  <entry>
    <title>#119 - DFDL v1.0 Experience 2: RE: Please support (real) unordered lists</title>
    <link rel="alternate" href="https://redmine.ogf.org/boards/17/topics/128?r=213#message-213"/>
    <id>https://redmine.ogf.org/boards/17/topics/128?r=213#message-213</id>
    <updated>2013-11-26T09:10:51-05:00</updated>
    <author>
      <name>Michael Beckerle</name>
    </author>
    <content type="html">
&lt;p&gt;Replying to my own reply here,....&lt;/p&gt;


	&lt;p&gt;The point earlier in the thread by Steve Hanson, pointing out that floating elements are almost certainly positional in nature, argues the current DFDL design point where all sequences are logically ordered even if physically unordered/floating, is not consistent. One can argue for unordered sequences, that logically ordered is a reasonable semantics, but for a floating element, that's very likely to be floating specifically for positional reasons.&lt;/p&gt;


	&lt;p&gt;I think we have a few choices:&lt;/p&gt;


	&lt;ol&gt;
	&lt;li&gt;add a [dataIndex] (or other name) member to the infoset, so as to preserve the physical-position information. That solves the problem in theory, but pragmatically if people want to use DFDL to convert to/from XML documents that are validatable, it doesn't fix the issue.&lt;/li&gt;
		&lt;li&gt;change spec for unordered sequences (and sequences with floating elements), and say the infoset is constructed in physical data order, hence, validation will not work for this data.&lt;/li&gt;
		&lt;li&gt;add a property: dfdl:sequencePreservesDataOrder="yes" which if "no" means current semantics where data are reordered into logical order, if "yes" means the order of children in the data is preserved, but this means that the data may not be valid if the data order isn't the same as the logical order.&lt;/li&gt;
		&lt;li&gt;add an xs:all group construct allowing children to be logically and physically unordered.&lt;/li&gt;
		&lt;li&gt;do nothing: anything that requires preservation of physical order would have to be modeled as an array-of-element-containing-choice. Then this problem would have to be addressed in a future revision (DFDL v2.0).&lt;/li&gt;
	&lt;/ol&gt;


	&lt;p&gt;Personally, I'm in favor of the "do nothing" option, but if this really has to be addressed then I think adding the xs:all group would be the next best thing to do. Adding a [dataIndex] member to the infoset is fine with me as well, but as noted above, this doesn't solve the issue, it just gives more information content allowing users to model data as sequences with unordered, and restore the physical data order information via a downstream transformation.&lt;/p&gt;    </content>
  </entry>
  <entry>
    <title>#119 - DFDL v1.0 Experience 2: RE: Please support (real) unordered lists</title>
    <link rel="alternate" href="https://redmine.ogf.org/boards/17/topics/128?r=193#message-193"/>
    <id>https://redmine.ogf.org/boards/17/topics/128?r=193#message-193</id>
    <updated>2013-11-12T10:23:44-05:00</updated>
    <author>
      <name>Michael Beckerle</name>
    </author>
    <content type="html">
&lt;p&gt;Using sequence annotations DFDL v1.0 supports unordered representations for logically ordered structures like sequences.&lt;/p&gt;


	&lt;p&gt;If the logical nature of the data is truly unordered in that the order is significant, then you must use a repeating element to capture that positioning explicitly. The index position within that repeating element array preserves the order value.&lt;/p&gt;


	&lt;p&gt;If several different things can be found at each position, that is modeled using a choice.&lt;/p&gt;


	&lt;p&gt;This is just the way it is done in DFDL v1.0. Use of xs:all constructs was considered at one time, but rejected as unnecessary given the array-of-element-containing-choice mechanism can model everything that an xs:all group could model.&lt;/p&gt;


	&lt;p&gt;I have heard no argument that array-of-element-containing-choice is not adequate for describing data formats yet, only that people familiar with XSD seem to want to use xs:all groups.&lt;/p&gt;


	&lt;p&gt;I think this issue is about having a decent tutorial telling people how to use DFDL to model many different things. Otherwise of course people try to take whatever experience with XML or XSD they have and leverage it on DFDL schema creation. This case of unordered lists is just a case where experience with XSD leads you to look for xs:all groups support, or other special keywords in DFDL. A tutorial would clear this up.&lt;/p&gt;    </content>
  </entry>
  <entry>
    <title>#119 - DFDL v1.0 Experience 2: RE: Please support (real) unordered lists</title>
    <link rel="alternate" href="https://redmine.ogf.org/boards/17/topics/128?r=147#message-147"/>
    <id>https://redmine.ogf.org/boards/17/topics/128?r=147#message-147</id>
    <updated>2013-10-16T05:50:34-04:00</updated>
    <author>
      <name>Tim Kimber</name>
    </author>
    <content type="html">
&lt;p&gt;DFDL already allows info sets to be created that do not conform to the XSD. The only difference in this case is that non-conformance would be highly likely rather than merely a possibility. So I think I agree - let's provide the property, and point out that it is not compatible with schema validation.&lt;/p&gt;    </content>
  </entry>
  <entry>
    <title>#119 - DFDL v1.0 Experience 2: RE: Please support (real) unordered lists</title>
    <link rel="alternate" href="https://redmine.ogf.org/boards/17/topics/128?r=146#message-146"/>
    <id>https://redmine.ogf.org/boards/17/topics/128?r=146#message-146</id>
    <updated>2013-10-16T04:19:45-04:00</updated>
    <author>
      <name>Steve Hanson</name>
    </author>
    <content type="html">
&lt;p&gt;Meant to comment specifically on the proposal for a new property to allow the infoset to be presented in data stream order.&lt;/p&gt;


	&lt;p&gt;The spec does not provide such a property because it means the infoset would not match the underlying XSD, and therefore would not validate using an XSDL 1.0 validator. That is something we have been strictly adhering to in DFDL 1.0 so that a DFDL schema with annotations removed gives exactly the same infoset, and validates the same, when presented with the equivalent XML.&lt;/p&gt;


	&lt;p&gt;If such a property was added, perhaps it's use could be mutually exclusive with switching on validation?&lt;/p&gt;    </content>
  </entry>
  <entry>
    <title>#119 - DFDL v1.0 Experience 2: RE: Please support (real) unordered lists</title>
    <link rel="alternate" href="https://redmine.ogf.org/boards/17/topics/128?r=145#message-145"/>
    <id>https://redmine.ogf.org/boards/17/topics/128?r=145#message-145</id>
    <updated>2013-10-16T04:01:47-04:00</updated>
    <author>
      <name>Steve Hanson</name>
    </author>
    <content type="html">
&lt;p&gt;Worth noting that the issue of order preservation applies equally to elements with floating 'yes'. Currently the spec says that these floaters will be presented in XSD sequence position whereas the desire would likely be to have them appear in data stream position.&lt;/p&gt;    </content>
  </entry>
  <entry>
    <title>#119 - DFDL v1.0 Experience 2: RE: Please support (real) unordered lists</title>
    <link rel="alternate" href="https://redmine.ogf.org/boards/17/topics/128?r=144#message-144"/>
    <id>https://redmine.ogf.org/boards/17/topics/128?r=144#message-144</id>
    <updated>2013-10-16T03:52:06-04:00</updated>
    <author>
      <name>Steve Hanson</name>
    </author>
    <content type="html">
&lt;p&gt;Let's look at the options:&lt;/p&gt;


	&lt;p&gt;If DFDL mixes features from XSDL 1.0 and 1.1 then DFDL is no longer based on XSDL 1.0 and is some strange hybrid beast, neither based on one or the other. That is extremely undesirable. The underlying schema (ie, minus the DFDL annotations) is meaningless and can't be used by a validating XML parser, is not supported by XML tools, etc.&lt;/p&gt;


	&lt;p&gt;An alternative is to move entirely to XSDL 1.1. That is not on the cards for DFDL 1.0, but is something that could be considered for a future DFDL 2.0, as XSDL 1.1 provides some other useful features, such as less restrictive UPA rules and its own equivalent of asserts which could be used for validation. The one downside I see is that tools support for XSDL 1.1 in the industry seems pretty sparse.&lt;/p&gt;


	&lt;p&gt;One thing that is technically feasible for DFDL 1.0 is to allow the use of xs:all, but that will come with the restrictions on maxOccurs &amp;#38; minOccurs.&lt;/p&gt;


	&lt;p&gt;Another possibility is for implementations to provide 'position' information in the infoset, allowing a post-parse step to recreate the original order.&lt;/p&gt;    </content>
  </entry>
  <entry>
    <title>#119 - DFDL v1.0 Experience 2: RE: Please support (real) unordered lists</title>
    <link rel="alternate" href="https://redmine.ogf.org/boards/17/topics/128?r=143#message-143"/>
    <id>https://redmine.ogf.org/boards/17/topics/128?r=143#message-143</id>
    <updated>2013-10-15T17:08:55-04:00</updated>
    <author>
      <name>Jonathan Cranford</name>
    </author>
    <content type="html">
&lt;p&gt;I'll expand a bit on Roger's request above.&lt;/p&gt;


The changes that XSD 1.1 made to &amp;lt;all&amp;gt; that are most relevant to supporting an unordered list capability are the following, I believe:
	&lt;ul&gt;
	&lt;li&gt;"The value of maxOccurs may now be greater than 1 on particles in an all group. The elements which match a particular particle need not be adjacent in the input."  (from &lt;a class="external" href="http://www.w3.org/TR/xmlschema11-1/#ch_models"&gt;http://www.w3.org/TR/xmlschema11-1/#ch_models&lt;/a&gt;)&lt;/li&gt;
		&lt;li&gt;minOccurs can be greater than 1.&lt;/li&gt;
	&lt;/ul&gt;


	&lt;p&gt;Here's the big question, as I see it: Is there anything that would prevent DFDL 1.0 from cherry-picking XSD 1.1 features as we're suggesting?  As I understand it, the design goals of DFDL include (1) having an infoset compatible with XSD processors and (2) having DFDL schema files that are compatible with XSD processors.  If DFDL 1.0 expands what is allowed in &amp;lt;all&amp;gt; the same as XSD 1.1 does, I don't think that would impact the infoset, but it would impact the schema file; the resulting schema file could only be processed by an XSD 1.1 processor.  Would that be an impediment to expanding what's allowed in &amp;lt;all&amp;gt; in DFDL 1.0?&lt;/p&gt;


	&lt;p&gt;If so, &amp;lt;all&amp;gt; would carry the same restrictions as in XSD 1.0; namely, the particles within &amp;lt;all&amp;gt; would have to have maxOccurs equal to 1 and minOccurs equal to either 0 or 1.  I think that would limit the utility of using &amp;lt;all&amp;gt; to represent unordered lists.&lt;/p&gt;    </content>
  </entry>
  <entry>
    <title>#119 - DFDL v1.0 Experience 2: Please support (real) unordered lists</title>
    <link rel="alternate" href="https://redmine.ogf.org/boards/17/topics/128"/>
    <id>https://redmine.ogf.org/boards/17/topics/128</id>
    <updated>2013-10-08T12:21:50-04:00</updated>
    <author>
      <name>Roger Costello</name>
    </author>
    <content type="html">
&lt;p&gt;The sequenceKind="unordered" property is a strange beast. It means:&lt;/p&gt;


	&lt;pre&gt;&lt;code&gt;The input data can be in any order, but I (the parser) am &lt;br /&gt;    going to reorder the data into the sequence listed here (in&lt;br /&gt;    the schema).&lt;/code&gt;&lt;/pre&gt;


	&lt;p&gt;We need real unordered lists. That is, the parser must not muck with the data - the order of the data must be preserved.&lt;/p&gt;


	&lt;p&gt;Please support one or both of these:&lt;/p&gt;


	&lt;p&gt;1. Support the XML Schema 1.1 &amp;lt;all&amp;gt; element.&lt;/p&gt;


	&lt;p&gt;2. Support a new property, to be used with sequenceKind="unordered". The property is used to specify whether the parser is allowed to reorder the input data. How about calling it: allowedToDorkWithTheOrder = true/false&lt;/p&gt;    </content>
  </entry>
  <entry>
    <title>#119 - DFDL v1.0 Experience 2: Document is in public comment until October 15th, 2013</title>
    <link rel="alternate" href="https://redmine.ogf.org/boards/17/topics/19"/>
    <id>https://redmine.ogf.org/boards/17/topics/19</id>
    <updated>2013-09-16T04:29:42-04:00</updated>
    <author>
      <name>Redmine Admin</name>
    </author>
    <content type="html">
&lt;p&gt;&lt;strong&gt;Document Links&lt;/strong&gt;:&lt;/p&gt;


	&lt;ul&gt;
	&lt;li&gt;&lt;a href="http://redmine.ogf.org/attachments/113/gwde-dfdl-experience-2-v1.0.pdf" class="external"&gt;[pdf]&lt;/a&gt;&lt;/li&gt;
		&lt;li&gt;&lt;a href="https://redmine.ogf.org/boards/17/topics/new" class="external"&gt;&lt;strong&gt;Comment Here&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
	&lt;/ul&gt;


	&lt;p&gt;&lt;strong&gt;Abstract:&lt;/strong&gt;&lt;/p&gt;


	&lt;p&gt;This document provides experience information to the OGF community on the original Data Format Description Language (DFDL) 1.0 specification (GFD-PR.174).  It describes shortcomings experienced in the area of &#8216;missing&#8217; elements, default value handling, repeating elements and sequence separator suppression.  All errata have been incorporated into a revised Data Format Description Language (DFDL) 1.0 specification (see &lt;a class="external" href="http://redmine.ogf.org/projects/editor-pubcom/boards/15"&gt;http://redmine.ogf.org/projects/editor-pubcom/boards/15&lt;/a&gt;).&lt;/p&gt;    </content>
  </entry>
</feed>
