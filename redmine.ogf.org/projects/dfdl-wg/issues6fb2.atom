<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>DFDL WG: Issues</title>
  <link rel="self" href="https://redmine.ogf.org/projects/dfdl-wg/issues.atom?query_id="/>
  <link rel="alternate" href="https://redmine.ogf.org/projects/dfdl-wg/issues?query_id="/>
  <id>https://redmine.ogf.org/</id>
  <updated>2020-02-04T12:03:27-05:00</updated>
  <author>
    <name>Open Grid Forum</name>
  </author>
  <generator uri="http://www.redmine.org/">
Redmine  </generator>
  <entry>
    <title>document #362 (closed): inconsistent/undesirable property names or property value names</title>
    <link rel="alternate" href="https://redmine.ogf.org/issues/362"/>
    <id>https://redmine.ogf.org/issues/362</id>
    <updated>2020-02-04T12:03:27-05:00</updated>
    <author>
      <name>Michael Beckerle</name>
    </author>
    <content type="html">
&lt;p&gt;For the next major version of DFDL, it would be good to clean up some of the property name or property value name inconsistencies.&lt;/p&gt;


	&lt;p&gt;This ticket is an open-ended list, in the updates/comments, of such observations about property/property value names.&lt;/p&gt;


	&lt;p&gt;These are coming in from reviewers of the specification over time, and being accumulated here.&lt;/p&gt;


	&lt;p&gt;Anything like this is going to be a phased-in kind of thing. I.e., we start accepting the new/changed values, but don't enforce that you must use them unless you set some flag that makes it not allow the older deprecated values/prop-names.&lt;/p&gt;


	&lt;p&gt;Things appearing on this list/ticket are not necessarily accepted for change/implementation. They are a list of suggestions to be considered.&lt;/p&gt;


&lt;hr /&gt;


	&lt;p&gt;ignoreCase =&gt; caseSensitive rationale: ignore is a verb. Verbs are less declarative than nouns. DFDL is supposed to be declarative.&lt;/p&gt;


	&lt;p&gt;lengthKind="explicit" but occursCountKind="expression". Inconsistent. The same property value should be used to indicate expressions for any property.&lt;/p&gt;


	&lt;p&gt;strict/lax not consistently used. We have trailingEmpty and trailingEmptyStrict, but no trailingEmptyLax, but we have strict/lax in as values for textNumberCheckPolicy.&lt;br /&gt;Similarly, it would seem for consistency rather than trailingEmptyStrict and trailingEmpty there should be a trailingEmptyPolicy with values strict/lax.&lt;/p&gt;


	&lt;p&gt;Policy vs. Kind, vs. Mode suffix: There are things that are setting policies that don't end with the suffix "Policy", which we adopted late in the game. We have suffixes "Kind", "Mode", "Policy" but no rules for when we use these. Things with values "strict" or "lax" are all Policy, but other things are also policy (emptyValueDelimiterPolicy). Some things are Kind like lengthKind and occursCountKind, but generateEscapeBlock is "always" or "whenNeeded" but is not a "Kind" nor "Policy".&lt;/p&gt;


	&lt;p&gt;There is only one property with "Mode" suffix, and that is textNumberRoundingMode, and that use of "mode" is consistent with outside usage of many things that discuss rounding for numbers, so that is ok. However, prose that discusses the dfdl:calendarCheckPolicy (which has values strict/lax), discusses them as strict "mode" and lax "mode". We should change this to "policy" for consistency.&lt;/p&gt;    </content>
  </entry>
  <entry>
    <title>document #356 (closed): Action 312 - Experimental BLOB Feature</title>
    <link rel="alternate" href="https://redmine.ogf.org/issues/356"/>
    <id>https://redmine.ogf.org/issues/356</id>
    <updated>2019-08-29T11:21:12-04:00</updated>
    <author>
      <name>Michael Beckerle</name>
    </author>
    <content type="html">
&lt;p&gt;BLOB feature to keep large objects out of the infoset but still allow parse and unparse.&lt;/p&gt;    </content>
  </entry>
  <entry>
    <title>document #354 (closed): Converting integer enumerations to meaningful strings in infoset</title>
    <link rel="alternate" href="https://redmine.ogf.org/issues/354"/>
    <id>https://redmine.ogf.org/issues/354</id>
    <updated>2019-08-08T12:48:47-04:00</updated>
    <author>
      <name>Steve Hanson</name>
    </author>
    <content type="html">
&lt;p&gt;Experimental feature to allow integer enums to appear as strings in the infoset.&lt;/p&gt;


	&lt;p&gt;&lt;a class="external" href="https://opensource.ncsa.illinois.edu/confluence/display/DFDL/Enumerations+and+Range+Tables+via+Simple+Type+Unions"&gt;https://opensource.ncsa.illinois.edu/confluence/display/DFDL/Enumerations+and+Range+Tables+via+Simple+Type+Unions&lt;/a&gt;&lt;/p&gt;    </content>
  </entry>
  <entry>
    <title>document #353 (closed): Variable path step in DFDL expression</title>
    <link rel="alternate" href="https://redmine.ogf.org/issues/353"/>
    <id>https://redmine.ogf.org/issues/353</id>
    <updated>2019-08-08T12:46:02-04:00</updated>
    <author>
      <name>Steve Hanson</name>
    </author>
    <content type="html">
&lt;p&gt;Experimental feature, needed to support DFDL4S use cases&lt;/p&gt;    </content>
  </entry>
  <entry>
    <title>document #344 (closed): Action 292 - Experience doc about hexBinary with length in lengthUnits 'b...</title>
    <link rel="alternate" href="https://redmine.ogf.org/issues/344"/>
    <id>https://redmine.ogf.org/issues/344</id>
    <updated>2019-06-27T13:59:56-04:00</updated>
    <author>
      <name>Michael Beckerle</name>
    </author>
    <content type="html">
&lt;p&gt;This has been implemented in Daffodil, as it was required for some formats. There is a daffodil bug ticket about making this an experimental feature so that we can follow our process about how things get into the DFDL spec. Idea -&gt; implement -&gt; document experience -&gt; propose for inclusion in DFDL.&lt;/p&gt;


	&lt;p&gt;This tracker is about creating the Experience document about this new feature.&lt;/p&gt;    </content>
  </entry>
  <entry>
    <title>document #341 (closed): Action 304 - Experience doc describing Layering feature</title>
    <link rel="alternate" href="https://redmine.ogf.org/issues/341"/>
    <id>https://redmine.ogf.org/issues/341</id>
    <updated>2019-06-27T12:13:14-04:00</updated>
    <author>
      <name>Michael Beckerle</name>
    </author>
    <content type="html">
&lt;p&gt;This feature has been implemented in Daffodil, and results are favorable.&lt;/p&gt;


	&lt;p&gt;We need an OGF Experience document describing it.&lt;/p&gt;    </content>
  </entry>
  <entry>
    <title>document #333 (closed): new bitOrder byteOrder combimation</title>
    <link rel="alternate" href="https://redmine.ogf.org/issues/333"/>
    <id>https://redmine.ogf.org/issues/333</id>
    <updated>2018-02-06T10:12:52-05:00</updated>
    <author>
      <name>Michael Beckerle</name>
    </author>
    <content type="html">
&lt;p&gt;Previously disallwoed combination to be allowed.&lt;/p&gt;    </content>
  </entry>
  <entry>
    <title>document #332 (closed): Potential syntax changes for DFDL v2</title>
    <link rel="alternate" href="https://redmine.ogf.org/issues/332"/>
    <id>https://redmine.ogf.org/issues/332</id>
    <updated>2018-01-23T10:16:36-05:00</updated>
    <author>
      <name>Steve Hanson</name>
    </author>
    <content type="html">
&lt;p&gt;Use this issue to record any suggestions for improvements to existing DFDL v1 syntax&lt;/p&gt;    </content>
  </entry>
  <entry>
    <title>document #331 (closed): Support binary calendar types with tick units other than seconds and mill...</title>
    <link rel="alternate" href="https://redmine.ogf.org/issues/331"/>
    <id>https://redmine.ogf.org/issues/331</id>
    <updated>2018-01-23T07:03:03-05:00</updated>
    <author>
      <name>Steve Hanson</name>
    </author>
    <content type="html">
&lt;p&gt;Currently DFDL binary timestamp representations are limited to 'binarySeconds' and 'binaryMilliseconds. Other 'tick' intervals have been observed in the real world, for example:&lt;/p&gt;


	&lt;ul&gt;
	&lt;li&gt;Windows FILETIME - 100ns&lt;/li&gt;
		&lt;li&gt;OPC-UA protocol - 100ns.&lt;/li&gt;
	&lt;/ul&gt;


	&lt;p&gt;It would be useful for DFDL to be able to handle any 'tick' interval.&lt;/p&gt;


	&lt;p&gt;It would also be useful for DFDL to allow any length of binary timestamp - currently the lengths are fixed depending on the representation.&lt;/p&gt;


	&lt;p&gt;The other variable is epoch, but DFDL already allows the epoch start to be specified in a sufficiently flexible way.&lt;/p&gt;


	&lt;p&gt;These should be considered as candidate improvements for DFDL 2.0.&lt;/p&gt;    </content>
  </entry>
  <entry>
    <title>document #329 (closed): dfdl:binaryNumberRep="offsetBinary" new behavior</title>
    <link rel="alternate" href="https://redmine.ogf.org/issues/329"/>
    <id>https://redmine.ogf.org/issues/329</id>
    <updated>2017-10-03T11:10:32-04:00</updated>
    <author>
      <name>Michael Beckerle</name>
    </author>
    <content type="html">
&lt;p&gt;We have found a number of places that use offset-binary numeric representation. This is also called excess-K, or biased, but I think offset binary is a better description of it.&lt;/p&gt;


	&lt;p&gt;In this representation you take an unsigned binary, and just subtract an offset. E.g., for a 3-bit number, mostSignificantBitFirst:&lt;/p&gt;


	&lt;p&gt;bits    unsigned  twos-comp  offsetBinary&lt;/p&gt;


	&lt;p&gt;000       0         0          -4&lt;br /&gt;001       1         1          -3&lt;br /&gt;010       2         2          -2&lt;br /&gt;011       3         3          -1&lt;br /&gt;100       4        -4           0&lt;br /&gt;101       5        -3           1&lt;br /&gt;110       6        -2           2&lt;br /&gt;111       7        -1           3&lt;/p&gt;


	&lt;p&gt;At the moment, users have to work around this in Daffodil using inputValueCalc and outputValueCalc. This is feasible, but really awkward for such a simple concept.&lt;/p&gt;


	&lt;p&gt;So we suggest that the next revision of DFDL include dfdl:binaryNumberRep="offsetBinary" as a required feature.&lt;/p&gt;    </content>
  </entry>
  <entry>
    <title>document #327 (closed): Required escapeBlockStart and escapeBlockEnd feature, or initiator/termin...</title>
    <link rel="alternate" href="https://redmine.ogf.org/issues/327"/>
    <id>https://redmine.ogf.org/issues/327</id>
    <updated>2017-08-18T10:54:52-04:00</updated>
    <author>
      <name>Michael Beckerle</name>
    </author>
    <content type="html">
&lt;p&gt;For future DFDL version.&lt;/p&gt;


	&lt;p&gt;The syslogd format specifies data that looks like this:&lt;/p&gt;


	&lt;pre&gt;&lt;code&gt;identifier="string contents" anotherIdentifier="yet more string contents"&lt;/code&gt;&lt;/pre&gt;


	&lt;p&gt;This is a sequence separated by spaces and terminated by newline.&lt;/p&gt;


	&lt;p&gt;Each item in the sequence is a pair of a name and a value, separated by "="&lt;/p&gt;


	&lt;p&gt;The quotation marks are required.&lt;br /&gt;The quotation marks must be at the beginning, and the end of the content.&lt;/p&gt;


	&lt;p&gt;The spaces inside the quotation marks are not escaped. Hence, the quotation marks cannot be modeled as dfdl:initiator and dfdl:terminator,&lt;br /&gt;as DFDL v1.0 behavior would require the interior spaces to then be escaped.&lt;/p&gt;


	&lt;p&gt;So they must be modeled as escapeBlockStart and escapeBlockEnd.&lt;/p&gt;


	&lt;p&gt;Using DFDL v1.0 generateBlockEscape="always", we can insist these escape block start/end are always generated, but we cannot insist on them being present when parsing. Furthermore, DFDL v1.0 cannot distinguish these:&lt;/p&gt;


	&lt;pre&gt;&lt;code&gt;identifier=foo&lt;br /&gt;   identifier="foo" &lt;br /&gt;   identifier="fo"o&lt;/code&gt;&lt;/pre&gt;


	&lt;p&gt;A DFDL feature is needed to either control existence and placement of escapeBlockStart/End, or to provide for initiator/terminator where, because there is definitely a terminator to be found, no escaping of the enclosing sequence's delimiters is required.&lt;/p&gt;    </content>
  </entry>
  <entry>
    <title>document #325 (closed): new property dfdl:choiceLengthUnits</title>
    <link rel="alternate" href="https://redmine.ogf.org/issues/325"/>
    <id>https://redmine.ogf.org/issues/325</id>
    <updated>2017-01-10T10:57:41-05:00</updated>
    <author>
      <name>Michael Beckerle</name>
    </author>
    <content type="html">
&lt;p&gt;Enum&lt;/p&gt;


	&lt;p&gt;Valid values are "bits", "bytes"&lt;/p&gt;


	&lt;p&gt;("characters" not allowed because of the complexity that implies, but could be added without loss of backward compatibility in the future if it was really needed.)&lt;/p&gt;


	&lt;p&gt;For DFDL v1.0 compliant implementations adding this property would invalidate existing schemas. Implementations are expected to provide this property with a default value of "bytes". A future version of DFDL may mandate specifying this property explicitly just as with all other properties.&lt;/p&gt;


	&lt;p&gt;(Per DFDL WG discussion on call of 2017-01-10)&lt;/p&gt;    </content>
  </entry>
  <entry>
    <title>document #311 (closed): Add fn:current-date-time(), fn:current-date() and fn:current-time()</title>
    <link rel="alternate" href="https://redmine.ogf.org/issues/311"/>
    <id>https://redmine.ogf.org/issues/311</id>
    <updated>2016-05-10T11:47:41-04:00</updated>
    <author>
      <name>Steve Hanson</name>
    </author>
    <content type="html">
&lt;p&gt;A requirement has been received for the DFDL serializer can insert the current date/time into an output field. This would require the addition of the XPath functions fn:current-date-time(), fn:current-date() and fn:current-time() to the DFDL XPath 2.0 subset, which could then be used in a dfdl:outputValueCalc expression.&lt;/p&gt;    </content>
  </entry>
  <entry>
    <title>document #301 (closed): Allow ICU 'precision 1' fallbacks to be used during encoding conversion</title>
    <link rel="alternate" href="https://redmine.ogf.org/issues/301"/>
    <id>https://redmine.ogf.org/issues/301</id>
    <updated>2015-09-22T13:22:11-04:00</updated>
    <author>
      <name>Steve Hanson</name>
    </author>
    <content type="html">
&lt;p&gt;Today the DFDL 1.0 spec has property dfdl:encodingErrorPolicy to control what happens when an unmappable or malformed character is encountered - 'error' or 'replace'. When 'replace' the appropriate substitution character is used.&lt;/p&gt;


	&lt;p&gt;There is also the orthogonal question of fallback mappings, which are mappings specified by an encoding which is not a normal round-trip mapping.  DFDL does not currently provide for switching on fallback mappings. Here's what ICU says about this at &lt;a class="external" href="http://userguide.icu-project.org/conversion/data"&gt;http://userguide.icu-project.org/conversion/data&lt;/a&gt;. &lt;br /&gt;_&lt;br /&gt;In the CHARMAP section of a .ucm file, each line contains a Unicode code point (like &amp;lt;U(1-6 hexadecimal digits for the code point)&amp;gt; ), a codepage character byte sequence (each byte like \xhh (2 hexadecimal digits} ), and an optional "precision" or "fallback" indicator.  The precision indicator either must be present in all mappings or in none of them. The indicator is a pipe symbol &#8216;|&#8217; followed by a 0, 1, 2, 3, or 4 that has the following meaning:&lt;/p&gt;


	&lt;p&gt;|0 - A "normal", roundtrip mapping from a Unicode code point and back. 
|1 - A "fallback" mapping only from Unicode to the codepage, but not back. 
|2 &#8211; A subchar1 mapping. The code point is unmappable, and if a substitution is performed, then the subchar1 should be used rather than the subchar. Otherwise, such mappings are ignored. 
|3 - A "reverse fallback" mapping only from the codepage to Unicode, but not back to the codepage. 
|4 - A "good one-way" mapping only from Unicode to the codepage, but not back.&lt;/p&gt;


	&lt;p&gt;Fallback mappings from Unicode typically do not map codes for the same character, but for "similar" ones. This mapping is sometimes done if a character exists in Unicode but not in the codepage. To replace it, ICU maps a codepage code to a similar-looking code for human-readable output. This mapping feature is not useful for text data transmission especially in markup languages where a Unicode code point can be escaped with its code point value. The ICU application programming interface (API) ucnv_setFallback() controls this fallback behavior.&lt;/p&gt;


	&lt;p&gt;"Reverse fallbacks" are technically similar, but the same Unicode character can be encoded twice in the codepage. ICU always uses reverse fallbacks at runtime.&lt;/p&gt;


	&lt;p&gt;A subset of the fallback mappings from Unicode is always used at runtime: Those that map private-use Unicode code points. Fallbacks from private-use code points are often introduced as replacements for previous roundtrip mappings for the same pair of codes. These replacements are used when a Unicode version assigns a new character that was previously mapped to that private-use code point. The mapping table is then changed to map the same codepage byte sequence to the new Unicode code point (as a new roundtrip) and the mapping from the old private-use code point to the same codepage code is preserved as a fallback.&lt;/p&gt;


	&lt;p&gt;A "good one-way" mapping is like a fallback, but ICU always uses "good one-way" mappings at runtime, regardless of the fallback API flag.&lt;/p&gt;


	&lt;p&gt;The idea is that fallbacks normally lose information, such as mapping from a compatibility variant of a letter to the ASCII version; however, fallbacks from PUA and reverse fallbacks are assumed to be for "the same character", just an older code for it._&lt;/p&gt;


	&lt;p&gt;So the default behaviour for ICU is to use "good one-way" mappings, "reverse fallback" mappings, and "fallback" mappings from private-use-area code points, but only to use normal "fallback" mappings if the setFallback API has been used.&lt;/p&gt;


	&lt;p&gt;IBM customers have requested the ability to use normal "fallback" mappings. At the current time, the only solution open to them is to change the .ucm file (or create a variant) and change the "|1" mappings to "|4" so that "fallback" mappings become "good one-way" mappings.&lt;/p&gt;    </content>
  </entry>
  <entry>
    <title>document #192 (closed): Property Precedence section missing some bidi properties</title>
    <link rel="alternate" href="https://redmine.ogf.org/issues/192"/>
    <id>https://redmine.ogf.org/issues/192</id>
    <updated>2014-09-12T10:57:16-04:00</updated>
    <author>
      <name>Steve Hanson</name>
    </author>
    <content type="html">
&lt;p&gt;It mentions only one of the bidi text properties.&lt;/p&gt;    </content>
  </entry>
</feed>
