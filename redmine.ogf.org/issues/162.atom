<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title></title>
  <link rel="self" href="https://redmine.ogf.org/issues/162.atom"/>
  <link rel="alternate" href="https://redmine.ogf.org/"/>
  <id>https://redmine.ogf.org/</id>
  <updated>2014-09-09T10:15:15-04:00</updated>
  <author>
    <name>Open Grid Forum</name>
  </author>
  <entry>
    <title>DRMAAv2 C Binding - bug #162: implementation specific structs should be visible in drmaa2.h</title>
    <link rel="alternate" href="https://redmine.ogf.org/issues/162"/>
    <id>https://redmine.ogf.org/issues/162?journal_id=496</id>
    <updated>2014-09-09T10:15:15-04:00</updated>
    <author>
      <name>Peter Tr&#246;ger</name>
    </author>
    <content type="html">
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Status&lt;/strong&gt; changed from &lt;i&gt;submitted&lt;/i&gt; to &lt;i&gt;accepted&lt;/i&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;The OGF-42 meeting decided that this issue is solved by the explicit definition of an implementation-specific DRMAAv2 header file, without declaring the content. This saves us from having differing drmaa2.h header files, as with the original proposal.&lt;/p&gt;


	&lt;p&gt;The C language binding should define the file name (e.g. &lt;code&gt;drmaa2_impl.h&lt;/code&gt;) for that private header. By this, higher-level libraries (e.g. the DRMAAv2 Go library) have a portable way to include the according structure definitions. One example use case is when the Go binding implementation tries to return a job template object that contains a Go Job object. The information for the content of this object comes from the underlying DRMAAv2 C library.&lt;/p&gt;


	&lt;p&gt;The whole issue is not relevant for applications using the DRMAAv2 C library direcly, since the forward-declared data structures are only returned to them.&lt;/p&gt;    </content>
  </entry>
  <entry>
    <title>DRMAAv2 C Binding - bug #162: implementation specific structs should be visible in drmaa2.h</title>
    <link rel="alternate" href="https://redmine.ogf.org/issues/162"/>
    <id>https://redmine.ogf.org/issues/162?journal_id=503</id>
    <updated>2014-09-09T18:36:19-04:00</updated>
    <author>
      <name>Peter Tr&#246;ger</name>
    </author>
    <content type="html">
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Status&lt;/strong&gt; changed from &lt;i&gt;accepted&lt;/i&gt; to &lt;i&gt;final review&lt;/i&gt;&lt;/li&gt;&lt;/ul&gt;    </content>
  </entry>
  <entry>
    <title>DRMAAv2 C Binding - bug #162: implementation specific structs should be visible in drmaa2.h</title>
    <link rel="alternate" href="https://redmine.ogf.org/issues/162"/>
    <id>https://redmine.ogf.org/issues/162?journal_id=811</id>
    <updated>2015-07-14T18:20:27-04:00</updated>
    <author>
      <name>Peter Tr&#246;ger</name>
    </author>
    <content type="html">
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Status&lt;/strong&gt; changed from &lt;i&gt;final review&lt;/i&gt; to &lt;i&gt;closed&lt;/i&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Fixed in July 2015 errata.&lt;/p&gt;    </content>
  </entry>
  <entry>
    <title>DRMAAv2 C Binding - bug #162: implementation specific structs should be visible in drmaa2.h</title>
    <link rel="alternate" href="https://redmine.ogf.org/issues/162"/>
    <id>https://redmine.ogf.org/issues/162?journal_id=832</id>
    <updated>2015-07-20T02:34:15-04:00</updated>
    <author>
      <name>Daniel Gruber</name>
    </author>
    <content type="html">
&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Assignee&lt;/strong&gt; set to &lt;i&gt;Daniel Gruber&lt;/i&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;The approach of drmaa2_impl.h we agreed at ISC 2015 f2f meeting does&lt;br /&gt;not work since those data structures are depended from drmaa2.h.&lt;br /&gt;Hence you would have circular dependencies. Resolving it to have&lt;br /&gt;more header file is not an option.&lt;/p&gt;


	&lt;p&gt;So we agreed that having the implementation specific functions in the&lt;br /&gt;drmaa2.h file.&lt;/p&gt;    </content>
  </entry>
</feed>
